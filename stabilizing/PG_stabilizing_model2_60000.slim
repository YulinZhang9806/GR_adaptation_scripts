initialize() {

//RECOMBINATIOIN
//could easily insert using the 'recombinationRate.txt' file provided.
initializeRecombinationRate($rate,$end);

//MUTATION TYPE
//additive deleterious mutation, could change 0.5 to 0.1/0 to indicate different dominance coefficient (e.g. partially recessive/recessive)
initializeMutationType("m1", 0.5, "g", -0.043, 0.23);

m1.convertToSubstitution = F;

//dominant neutral mutation used for stabilizing selection
initializeMutationType("m2", 0.5, "f", 0);

m2.convertToSubstitution = F;

//MUTATION RATE
initializeMutationRate(7e-9);

//GENOMIC ELEMENT TYPES
initializeGenomicElementType("g1",c(m2,m1),c(0.01,1));

//CHORMOSOME ORGANIZATION
initializeGenomicElement(g1,1,71518362);

//set new optimum for p2, could change different optimum for p2 here (e.g. optimum 1,2,5)
defineConstant("QTL_optimum",2);

//position and effect of m2 mutations of previous simulations, need to be extracted from previous .out files. See README.md for explanations
defineConstant("m2_pos",c());
defineConstant("m2_effect",c());

}

1 {
//import data from 44000 generation outputFull file
	defineConstant("simID",2618846210948);
	sim.readFromPopulationFile("/place/to/save/your/file/PG_stabilizing_partial_sqrt3000_opt1_run3_gen44000_"+simID+".txt");

//reset effect size for all m2 mutations before new simulations	
	m2muts = sim.mutationsOfType(m2);
	for (i in seqAlong(m2_pos)){
		mut=m2muts[m2muts.position==m2_pos[i]];
		e = m2_effect[i];
		mut.setValue("effect",e);
    }
}

44000:60020 late() {

//p2 split from p1 and set Ne of p1 to 5000	
	if (sim.generation==44001){ 
		sim.addSubpopSplit("p2", 5000, p1);
		p1.setSubpopulationSize(5000);
	}

//generate bottleneck
	if (sim.generation==60000){
		p2.setSubpopulationSize(10);
	}

//set effect size for new m2 mutations
	all_m2 = sim.mutationsOfType(m2);
	new_m2 = all_m2[all_m2.originGeneration == sim.generation];
	if (size(new_m2)){
		//draw mutation effect for new mutations
		effects = rnorm(size(new_m2),0,1);
		for (i in seqAlong(new_m2)){
			e = effects[i];
			mut = new_m2[i];
			mut.setValue("effect",e);
		}
	}

//construct phenotypes from partial effects
	inds = sim.subpopulations.individuals;
	for (ind in inds){
		muts = ind.genomes.mutationsOfType(m2);
		if (size(muts)){
			ind.setValue("phenotype", sum(muts.getValue("effect")));
		}
		else {
			ind.setValue("phenotype", 0.0);
		}
	}
	p_mean = mean(inds.getValue("phenotype"));
	p1_mean = mean(p1.individuals.getValue("phenotype"));
	p2_mean = mean(p2.individuals.getValue("phenotype"));
	catn(sim.generation+" :");
	catn("Mean phenotype : "+p_mean);
	catn("Mean phenotype p1 : "+p1_mean);
	catn("Mean phenotype p2 : "+p2_mean);
	m2muts = sim.mutationsOfType(m2);
	m2freqs_p1 = sim.mutationFrequencies(p1,m2muts);
	m2freqs_p2 = sim.mutationFrequencies(p2,m2muts);
	m2num_p1 = size(m2freqs_p1);
	m2num_p2 = size(m2freqs_p2);
	catn("Total m2 number p1 : "+m2num_p1);
	catn("Total m2 number p2 : "+m2num_p2);
	ave_m2num_p1 = sum(m2freqs_p1);
	ave_m2num_p2 = sum(m2freqs_p2);
	catn("Mean m2 mutation number p1 : "+ave_m2num_p1);
	catn("Mean m2 mutation number p2 : "+ave_m2num_p2);

//output effect size and mutation message of each m2 mutation for following simulations
	if (sim.generation==60020){
		m2muts = sim.mutationsOfType(m2);
		muts = m2muts[sim.mutationFrequencies(p2,m2muts) > 0.0];
		catn("p2 : ");
		catn("Mutation\tFrequency\tEffect");
		for (i in seqAlong(muts)){
			mut = muts[i];
			freq = sim.mutationFrequencies(p2,mut);
			e = mut.getValue("effect");
			catn("m2:"+mut.position+"\t"+freq+"\t"+e);
		}
		catn("p1 : ");
		catn("Mutation\tFrequency\tEffect");
		muts = m2muts[sim.mutationFrequencies(p1,m2muts) > 0.0];
		for (i in seqAlong(muts)){
			mut = muts[i];
			freq = sim.mutationFrequencies(p1,mut);
			e = mut.getValue("effect");
			catn("m2:"+mut.position+"\t"+freq+"\t"+e);
		}
		sim.outputFull("/place/to/save/your/file/PG_stabilizing_partial_sqrt3000_model2_opt2_run3_gen60020_"+simID+".txt");
	}
}

//reset fitness of each individual to be affected by the phenotype multiplicatively
fitness(NULL, p1) {
	phe = individual.getValue("phenotype");
//could set variance to 10000 to set different selection strength (e.g. dnorm(phe, 0, sqrt(10000));)
	return dnorm(phe, 0, sqrt(3000));
}

//reset optimum of p2 to be different from p1
fitness(NULL, p2) { 
	phe = individual.getValue("phenotype");
//could set variance to 10000 to set different selection strength (e.g. dnorm(phe, 0, sqrt(10000)))
	return dnorm(phe, QTL_optimum, sqrt(3000));
}

//output mean fitness of populations
44002:60021 early() {
	catn("Fitness of p2: "+mean(p2.cachedFitness(NULL)));
	catn("Fitness of p1: "+mean(p1.cachedFitness(NULL)));
}

60021 {
	sim.simulationFinished();
}
